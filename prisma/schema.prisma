// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models - after every change run `npx prisma db push` in your terminal to update the database
model User {
  id           String    @id
  username     String    @unique
  displayName  String
  email        String?   @unique
  passwordHash String?
  googleId     String?   @unique
  avatarUrl    String?
  bio          String?
  sessios      Session[]
  createdAt    DateTime  @default(now())
  posts        Post[]
  following    Follow[]  @relation("Following") // the users that the current user is following
  followers    Follow[]  @relation("Followers") // the users that are following the current user

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Follow {
  // the id of the user that makes the follow request 
  followerId String
  follower   User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)

  // the id of the user that is being followed
  followingId String
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  // this will make sure that a user can only follow a user once, there can be only 1 combimation of follower and following
  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id        String   @id @default(cuid())
  content   String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("posts")
}
